{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/chinmayhandi/CIE-01/blob/main/AIML_Lab_Exercise1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uQI_Vk_ewg0t"
      },
      "source": [
        "# Numpy and Pandas Program\n",
        "\n",
        "---\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oneLpscYxdw-"
      },
      "source": [
        "# **NumPy and Pandas Program in Python**\n",
        "1. Perform Arithmetic operations\n",
        "2. How do you create a 2D NumPy array and access specific elements?\n",
        "3. Add Two Arrays Element-wise\n",
        "4. Generate Random Numbers and Find Max/Min\n",
        "5. Reshape and Flatten an Array\n",
        "6. Filter Elements Using Boolean Masking\n",
        "7. Matrix Multiplication\n",
        "8. Calculate Mean, Median, and Standard Deviation\n",
        "9. Create a Range of Values\n",
        "10. Transpose of a Matrix\n",
        "11. Element-wise Operations with Functions\n",
        "12. Create and Display a DataFrame\n",
        "13. Read a CSV File and Show Basic Info\n",
        "13. Read a CSV File and Show Basic Info\n",
        "15. Group By and Aggregate\n",
        "16. Add a New Column and Save to CSV\n",
        "17. Line Graph\n",
        "18. Bar Graph\n",
        "19. Pie Chart\n",
        "20. Histogram\n",
        "21. Scatter Plot\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IdzrlEGb3Daq",
        "outputId": "01e65cd8-d7ea-4df7-ad6f-49ebb5e91a01"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Array a: [1 2 3 4 5]\n",
            "Array b: [10 20 30 40 50]\n",
            "Sum: [11 22 33 44 55]\n",
            "Difference: [ 9 18 27 36 45]\n",
            "Product: [ 10  40  90 160 250]\n",
            "Mean of a: 3.0\n",
            "Max of b: 50\n",
            "Min of b: 10\n"
          ]
        }
      ],
      "source": [
        "#1. Perform Arithmetic operations\n",
        "import numpy as np\n",
        "# Create NumPy arrays\n",
        "a = np.array([1, 2, 3, 4, 5])\n",
        "b = np.array([10, 20, 30, 40, 50])\n",
        "# Arithmetic operations\n",
        "sum_array = a + b\n",
        "diff_array = b - a\n",
        "product_array = a * b\n",
        "# Statistics\n",
        "mean_a = np.mean(a)\n",
        "max_b = np.max(b)\n",
        "min_b = np.min(b)\n",
        "# Display results\n",
        "print(\"Array a:\", a)\n",
        "print(\"Array b:\", b)\n",
        "print(\"Sum:\", sum_array)\n",
        "print(\"Difference:\", diff_array)\n",
        "print(\"Product:\", product_array)\n",
        "print(\"Mean of a:\", mean_a)\n",
        "print(\"Max of b:\", max_b)\n",
        "print(\"Min of b:\", min_b)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "de7hgHSJ3TZ3",
        "outputId": "807d8db6-397a-432d-bf26-3aeb195e3a72"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Element at (0, 1): 2\n",
            "Second row: [4 5 6]\n",
            "[[1 2 3]\n",
            " [4 5 6]]\n"
          ]
        }
      ],
      "source": [
        "#2. How do you create a 2D NumPy array and access specific elements?\n",
        "import numpy as np\n",
        "# Create a 2D array\n",
        "arr = np.array([[1, 2, 3], [4, 5, 6]])\n",
        "\n",
        "# Access elements\n",
        "print(\"Element at (0, 1):\", arr[0, 1])\n",
        "print(\"Second row:\", arr[1])\n",
        "print(arr)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gto6wtog3giy",
        "outputId": "add3f864-2a22-4975-d09b-06ffd02714fb"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Sum: [ 6 12 18]\n"
          ]
        }
      ],
      "source": [
        "#3. Add Two Arrays Element-wise\n",
        "a = np.array([5, 10, 15])\n",
        "b = np.array([1, 2, 3])\n",
        "\n",
        "# Add arrays\n",
        "result = a + b\n",
        "print(\"Sum:\", result)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "842gdkzB89ac",
        "outputId": "b3439629-7f07-4fc6-bf8f-fcb2d57a363e"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Random Array: [80 18 92 45 85 11 18 99 68 98]\n",
            "Maximum: 99\n",
            "Minimum: 11\n"
          ]
        }
      ],
      "source": [
        "#4. Generate Random Numbers and Find Max/Min\n",
        "import numpy as np\n",
        "rand_array = np.random.randint(1, 100, size=10)\n",
        "print(\"Random Array:\", rand_array)\n",
        "print(\"Maximum:\", np.max(rand_array))\n",
        "print(\"Minimum:\", np.min(rand_array))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xaQe9nUi9IBM",
        "outputId": "c0993dc1-a92a-4564-d4dc-6cf7033cb9ba"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Reshaped (2x3):\n",
            " [[1 2 3]\n",
            " [4 5 6]]\n",
            "Flattened: [1 2 3 4 5 6]\n"
          ]
        }
      ],
      "source": [
        "#5. Reshape and Flatten an Array\n",
        "#How can you change the shape of an array?\n",
        "\n",
        "import numpy as np\n",
        "arr = np.array([1, 2, 3, 4, 5, 6])\n",
        "# Reshape to 2x3 matrix\n",
        "reshaped = arr.reshape(2, 3)\n",
        "print(\"Reshaped (2x3):\\n\", reshaped)\n",
        "\n",
        "# Flatten back to 1D\n",
        "flattened = reshaped.flatten()\n",
        "print(\"Flattened:\", flattened)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VQmjJu1_9aXC",
        "outputId": "066a30ad-3e21-493f-aca6-3c9a4d1dc7fa"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Elements > 25: [30 40 50]\n"
          ]
        }
      ],
      "source": [
        "#6. Filter Elements Using Boolean Masking\n",
        "#How do you filter array elements based on a condition?\n",
        "\n",
        "import numpy as np\n",
        "arr = np.array([10, 20, 30, 40, 50])\n",
        "# Condition: elements > 25\n",
        "filtered = arr[arr > 25]\n",
        "print(\"Elements > 25:\", filtered)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P2yXJEVC9oIN",
        "outputId": "1f37fe28-824e-4c07-969d-228fd9dabf93"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Matrix A:\n",
            " [[1 2]\n",
            " [3 4]]\n",
            "Matrix B:\n",
            " [[5 6]\n",
            " [7 8]]\n",
            "A x B:\n",
            " [[19 22]\n",
            " [43 50]]\n"
          ]
        }
      ],
      "source": [
        "#7. Matrix Multiplication\n",
        "#How do you multiply two matrices in NumPy?\n",
        "\n",
        "import numpy as np\n",
        "\n",
        "A = np.array([[1, 2], [3, 4]])\n",
        "B = np.array([[5, 6], [7, 8]])\n",
        "\n",
        "# Matrix multiplication\n",
        "result = np.dot(A, B)\n",
        "\n",
        "print(\"Matrix A:\\n\", A)\n",
        "print(\"Matrix B:\\n\", B)\n",
        "print(\"A x B:\\n\", result)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HnWBmHG19t_9",
        "outputId": "394fee9a-fa7b-43fb-b5c7-ea59b4f38172"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Mean: 3.5\n",
            "Median: 3.5\n",
            "Standard Deviation: 1.707825127659933\n"
          ]
        }
      ],
      "source": [
        "#8. Calculate Mean, Median, and Standard Deviation\n",
        "#How do you calculate basic statistics using NumPy?\n",
        "data = np.array([1, 2, 3, 4, 5, 6])\n",
        "\n",
        "print(\"Mean:\", np.mean(data))\n",
        "print(\"Median:\", np.median(data))\n",
        "print(\"Standard Deviation:\", np.std(data))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ktLidJ7k91U0",
        "outputId": "b779d9d4-2633-4f56-e93c-05ba388fabc0"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Arange: [0 1 2 3 4 5 6 7 8 9]\n",
            "Linspace: [0.         0.6981317  1.3962634  2.0943951  2.7925268  3.4906585\n",
            " 4.1887902  4.88692191 5.58505361 6.28318531]\n"
          ]
        }
      ],
      "source": [
        "#9. Create a Range of Values\n",
        "#How do you create a range of evenly spaced values?\n",
        "# From 0 to 9\n",
        "a = np.arange(0, 10)\n",
        "\n",
        "# From 0 to 2π with 10 values\n",
        "b = np.linspace(0, 2 * np.pi, 10)\n",
        "\n",
        "print(\"Arange:\", a)\n",
        "print(\"Linspace:\", b)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cWpAw0Dq98Eb",
        "outputId": "393073b8-8852-4c04-9616-9d8a673d843c"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Original:\n",
            " [[1 2 3]\n",
            " [4 5 6]]\n",
            "Transposed:\n",
            " [[1 4]\n",
            " [2 5]\n",
            " [3 6]]\n"
          ]
        }
      ],
      "source": [
        "#10. Transpose of a Matrix\n",
        "#How do you transpose a matrix in NumPy?\n",
        "\n",
        "matrix = np.array([[1, 2, 3], [4, 5, 6]])\n",
        "\n",
        "transpose = matrix.T\n",
        "\n",
        "print(\"Original:\\n\", matrix)\n",
        "print(\"Transposed:\\n\", transpose)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Vbtto6c--JRU",
        "outputId": "87d62cc7-53ea-4427-c273-33e796a98f01"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "x values: [0.         1.57079633 3.14159265]\n",
            "sin(x): [0.0000000e+00 1.0000000e+00 1.2246468e-16]\n"
          ]
        }
      ],
      "source": [
        "#11. Element-wise Operations with Functions\n",
        "#How do you apply mathematical functions to an array?\n",
        "x = np.array([0, np.pi/2, np.pi])\n",
        "\n",
        "# Apply sine function\n",
        "y = np.sin(x)\n",
        "\n",
        "print(\"x values:\", x)\n",
        "print(\"sin(x):\", y)\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dIZriCR3-ZuS",
        "outputId": "78949f54-9110-4169-d17f-4062274542f0"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "      Name  Age  Score\n",
            "0    Alice   25     85\n",
            "1      Bob   30     90\n",
            "2  Charlie   22     95\n"
          ]
        }
      ],
      "source": [
        "#12. Create and Display a DataFrame\n",
        "import pandas as pd\n",
        "# Create DataFrame\n",
        "data = {\n",
        "    'Name': ['Alice', 'Bob', 'Charlie'],\n",
        "    'Age': [25, 30, 22],\n",
        "    'Score': [85, 90, 95]\n",
        "}\n",
        "\n",
        "df = pd.DataFrame(data)\n",
        "print(df)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7qrY3bg2gfaT",
        "outputId": "5ebafe2a-a36a-4f1e-a536-5a6f28b010ae"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   sl.no    name   see marks\n",
            "0      1  chinmay       9.00\n",
            "1      2   rizwan       9.00\n",
            "2      3   aditya       9.69\n",
            "3      4     ayan       8.50\n",
            "4      5    yunus       8.00\n"
          ]
        }
      ],
      "source": [
        "#13\n",
        "import pandas as pd\n",
        "df=pd.read_csv(\"/content/drive/MyDrive/chinmay.csv\")\n",
        "print(df.head())\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bdTFJXHWiYhK",
        "outputId": "87729132-2624-4072-bed7-879e4b3be371"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "   Name  Age\n",
            "1  Ravi   29\n"
          ]
        }
      ],
      "source": [
        "#14\n",
        "import pandas as pd\n",
        "\n",
        "data = {\n",
        "    'Name': ['Asha', 'Ravi'],\n",
        "    'Age': [24, 29]\n",
        "}\n",
        "\n",
        "df = pd.DataFrame(data)\n",
        "Filter_df = df[df['Age'] > 24]\n",
        "print(Filter_df)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "BYOV7TuQlR-3"
      },
      "outputs": [],
      "source": [
        "#15\n",
        "import pandas as pd\n",
        "\n",
        "data = {\n",
        "    'department': ['CS', 'EC', 'EE'],\n",
        "    'Marks': [87.23, 95, 78]\n",
        "}\n",
        "\n",
        "df = pd.DataFrame(data)\n",
        "grouped = df.groupby('department').mean(numeric_only=True)\n",
        "print(grouped)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "YuZ_f4dfwwgK"
      },
      "outputs": [],
      "source": [
        "#17\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "x = [1, 2, 3, 4, 5]\n",
        "y = [10, 12, 15, 18, 20]\n",
        "\n",
        "plt.plot(x, y)\n",
        "plt.title(\"Simple Line Graph\")\n",
        "plt.xlabel(\"X values\")\n",
        "plt.ylabel(\"Y values\")\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "EOHlZYg_xBQD"
      },
      "outputs": [],
      "source": [
        "#18\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "students = ['Asha', 'Ravi', 'Neha']\n",
        "scores = [85, 90, 78]\n",
        "\n",
        "plt.bar(students, scores, color='skyblue')\n",
        "plt.title(\"Student Scores\")\n",
        "plt.xlabel(\"Students\")\n",
        "plt.ylabel(\"Marks\")\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "sqH-T4c3xIpJ"
      },
      "outputs": [],
      "source": [
        "#19\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "labels = ['Python', 'Java', 'C++', 'C']\n",
        "sizes = [40, 25, 20, 15]\n",
        "\n",
        "plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=140)\n",
        "plt.title(\"Programming Language Usage\")\n",
        "plt.axis('equal')  # Make it a circle\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "ISKZPUOKxP0K",
        "outputId": "6521be2b-21b6-406d-84e8-8377761b8497"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "#20\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "ages = [18, 22, 21, 25, 30, 30, 27, 25, 22, 19]\n",
        "\n",
        "plt.hist(ages, bins=5, color='green')\n",
        "plt.title(\"Age Distribution\")\n",
        "plt.xlabel(\"Age\")\n",
        "plt.ylabel(\"Frequency\")\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "QcBRXs9lxV2J",
        "outputId": "97ac4906-9016-4080-c98f-1f0e2160ab51"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "#21\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "x = [1, 2, 3, 4, 5]\n",
        "y = [5, 7, 6, 8, 10]\n",
        "\n",
        "plt.scatter(x, y, color='red')\n",
        "plt.title(\"Scatter Plot Example\")\n",
        "plt.xlabel(\"X values\")\n",
        "plt.ylabel(\"Y values\")\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KvHC12JUatcV"
      },
      "source": [
        "### **Lambda**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WXP0EpFxKTKe",
        "outputId": "3a21682d-4156-4682-e742-163a599f3cdd"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "8\n"
          ]
        }
      ],
      "source": [
        "add = lambda x, y: x + y\n",
        "print(add(5, 3))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sCX6zDIHLWoz",
        "outputId": "eaad5e9a-6b31-41eb-f7c3-317aa74230df"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "16\n"
          ]
        }
      ],
      "source": [
        "square = lambda x: x ** 2\n",
        "print(square(4))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Pugx-b_OL9FM",
        "outputId": "5eaf6ead-f246-4ed6-9a28-2e3488a8d4ec"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[2, 4, 6]\n"
          ]
        }
      ],
      "source": [
        "numbers = [1, 2, 3, 4, 5, 6]\n",
        "even_numbers = list(filter(lambda x: x % 2 == 0, numbers))\n",
        "print(even_numbers)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "V0ToIxx1NIaY",
        "outputId": "ee610642-993a-4df2-eaa6-dd22ed008fc5"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[(1, 'apple'), (3, 'banana'), (2, 'cherry')]\n"
          ]
        }
      ],
      "source": [
        "data = [(1, 'apple'), (3, 'banana'), (2, 'cherry')]\n",
        "sorted_data = sorted(data, key=lambda x: x[1])\n",
        "print(sorted_data)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WZRVGcmcNpF0",
        "outputId": "8df24129-9d2d-4378-99ca-d5a5090ef650"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "24\n"
          ]
        }
      ],
      "source": [
        "multiply = lambda x, y, z: x * y * z\n",
        "print(multiply(2, 3, 4))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Aiv7xHCUNqIO",
        "outputId": "3c779039-37bd-4d72-bf0a-9e181b490dc8"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[2, 4, 6, 8, 10]\n"
          ]
        }
      ],
      "source": [
        "numbers = [1, 2, 3, 4, 5]\n",
        "doubled = list(map(lambda x: x * 2, numbers))\n",
        "print(doubled)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VIjK0xp_Nucy",
        "outputId": "f0b62fc2-a6cd-436a-9044-2fd7978dbd5d"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[15, 25]\n"
          ]
        }
      ],
      "source": [
        "numbers = [10, 15, 20, 25, 30]\n",
        "odds = list(filter(lambda x: x % 2 != 0, numbers))\n",
        "print(odds)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TWc0x0UmNzB3",
        "outputId": "0d745819-b222-450d-e180-e63d9435057f"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[{'name': 'Charlie', 'score': 78}, {'name': 'Alice', 'score': 85}, {'name': 'Bob', 'score': 92}]\n"
          ]
        }
      ],
      "source": [
        "students = [\n",
        "    {\"name\": \"Alice\", \"score\": 85},\n",
        "    {\"name\": \"Bob\", \"score\": 92},\n",
        "    {\"name\": \"Charlie\", \"score\": 78}\n",
        "]\n",
        "\n",
        "\n",
        "sorted_students = sorted(students, key=lambda student: student['score'])\n",
        "print(sorted_students)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iy_1UDO-N4_Y",
        "outputId": "14a6c9c8-909c-46b8-81f8-99597c9a6e19"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "10\n",
            "15\n"
          ]
        }
      ],
      "source": [
        "def make_multiplier(n):\n",
        "    return lambda x: x * n\n",
        "\n",
        "double = make_multiplier(2)\n",
        "triple = make_multiplier(3)\n",
        "\n",
        "print(double(5))\n",
        "print(triple(5))\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cF2jCke3N77q",
        "outputId": "bb50e50e-a3d0-4031-f51e-d162b1329bb7"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Even\n",
            "Odd\n"
          ]
        }
      ],
      "source": [
        "check_even = lambda x: \"Even\" if x % 2 == 0 else \"Odd\"\n",
        "print(check_even(4))\n",
        "print(check_even(7))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4pQ-PsdnOCNL",
        "outputId": "01bae860-e90b-47db-d925-215e24f76d70"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "24\n"
          ]
        }
      ],
      "source": [
        "from functools import reduce\n",
        "\n",
        "numbers = [1, 2, 3, 4]\n",
        "product = reduce(lambda x, y: x * y, numbers)\n",
        "print(product)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xElkbReWOK0y",
        "outputId": "20ee6d05-c68b-43b6-bbb8-6732ee62d799"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "['John', 'Doe', 'Alice']\n"
          ]
        }
      ],
      "source": [
        "names = [\"john\", \"DOE\", \"ALICE\"]\n",
        "capitalized = list(map(lambda name: name.capitalize(), names))\n",
        "print(capitalized)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OuxZm5tFOPaO",
        "outputId": "b76d0474-c4e7-46ca-a8f8-59d22f450311"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "['example.com', 'test.com']\n"
          ]
        }
      ],
      "source": [
        "emails = [\"alice@example.com\", \"bob@test.com\"]\n",
        "domains = list(map(lambda email: email.split('@')[1], emails))\n",
        "print(domains)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HNWdVhKzOVPM",
        "outputId": "2a9a9817-b97d-47ff-8788-27dab431bf6c"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "True\n",
            "True\n"
          ]
        }
      ],
      "source": [
        "numbers = [2, 4, 6, 8]\n",
        "\n",
        "\n",
        "all_even = all(map(lambda x: x % 2 == 0, numbers))\n",
        "print(all_even)\n",
        "\n",
        "\n",
        "any_gt_5 = any(map(lambda x: x > 5, numbers))\n",
        "print(any_gt_5)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hvfFaX3IOYxj",
        "outputId": "bdc39632-0d02-4c61-c8c6-66aff01e5121"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "['fig', 'apple', 'banana', 'cherry']\n"
          ]
        }
      ],
      "source": [
        "words = [\"apple\", \"banana\", \"cherry\", \"fig\"]\n",
        "sorted_words = sorted(words, key=lambda word: len(word))\n",
        "print(sorted_words)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K5URcfwfOdFD",
        "outputId": "c7bdb294-200a-4651-fe7d-059aab8ee6d9"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "adbmal snoitcnuf era lufrewop\n"
          ]
        }
      ],
      "source": [
        "sentence = \"lambda functions are powerful\"\n",
        "reversed_words = list(map(lambda word: word[::-1], sentence.split()))\n",
        "print(\" \".join(reversed_words))\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Cioz4qNDOgMG",
        "outputId": "cc3def8d-1f9e-4069-f440-c4ee62f3d43b"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "['Charlie Brown', 'Alice Johnson', 'Bob Smith']\n"
          ]
        }
      ],
      "source": [
        "people = [\"Alice Johnson\", \"Bob Smith\", \"Charlie Brown\"]\n",
        "sorted_by_last = sorted(people, key=lambda name: name.split()[-1])\n",
        "print(sorted_by_last)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MqVD7LkFOien",
        "outputId": "3ff9c74b-daf9-4423-eaa3-314484168695"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "15\n",
            "Error\n"
          ]
        }
      ],
      "source": [
        "operations = {\n",
        "    'add': lambda x, y: x + y,\n",
        "    'sub': lambda x, y: x - y,\n",
        "    'mul': lambda x, y: x * y,\n",
        "    'div': lambda x, y: x / y if y != 0 else 'Error'\n",
        "}\n",
        "\n",
        "print(operations['add'](10, 5))\n",
        "print(operations['div'](10, 0))\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bpoXhck6Ok2P",
        "outputId": "a1e13ca0-41e9-48bc-c4f3-5a519ab72840"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[6, 12, 18]\n"
          ]
        }
      ],
      "source": [
        "numbers = list(range(1, 21))\n",
        "\n",
        "filtered = list(filter(lambda x: x % 2 == 0 and x % 3 == 0, numbers))\n",
        "print(filtered)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JMSy2pmtOoSR",
        "outputId": "a14b9dcf-cf38-4cba-8b6e-b8ce612cf44e"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Even\n",
            "Odd\n"
          ]
        }
      ],
      "source": [
        "check_even_odd = lambda num: \"Even\" if num % 2 == 0 else \"Odd\"\n",
        "print(check_even_odd(4))\n",
        "print(check_even_odd(7))\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MPaI5XyROtbX",
        "outputId": "0e60c8d6-f5af-4a3e-bcb2-ef0bfa9b12bb"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "GEEKSFORGEEKS\n"
          ]
        }
      ],
      "source": [
        "s1 = 'GeeksforGeeks'\n",
        "\n",
        "s2 = lambda func: func.upper()\n",
        "print(s2(s1))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "u8moaIepOw7J",
        "outputId": "c19ad395-8d9f-4b31-f0be-be8ca8c9498f"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Positive\n",
            "Negative\n",
            "Zero\n"
          ]
        }
      ],
      "source": [
        "\n",
        "n = lambda x: \"Positive\" if x > 0 else \"Negative\" if x < 0 else \"Zero\"\n",
        "\n",
        "print(n(5))\n",
        "print(n(-3))\n",
        "print(n(0))\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tsg0or3ROtaf",
        "outputId": "4d959f28-b874-4a09-b780-89e3a6f40f44"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "10\n",
            "20\n",
            "30\n",
            "40\n"
          ]
        }
      ],
      "source": [
        "li = [lambda arg=x: arg * 10 for x in range(1, 5)]\n",
        "for i in li:\n",
        "    print(i())\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9VEN3n_IO7FW",
        "outputId": "1abf20a7-2b88-4dd6-d32b-a143c2e5040d"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Even\n",
            "Odd\n"
          ]
        }
      ],
      "source": [
        "\n",
        "check = lambda x: \"Even\" if x % 2 == 0 else \"Odd\"\n",
        "\n",
        "print(check(4))\n",
        "print(check(7))\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Tj1xb5CLO8AR",
        "outputId": "afd97e90-9279-4b42-e8a3-dbe6fc60947c"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "(7, 12)\n"
          ]
        }
      ],
      "source": [
        "\n",
        "calc = lambda x, y: (x + y, x * y)\n",
        "\n",
        "res = calc(3, 4)\n",
        "print(res)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bIWU7GjEO_Rb",
        "outputId": "bc94e796-af5d-49e8-ba4b-4c32118d5ce4"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[2, 4, 6]\n"
          ]
        }
      ],
      "source": [
        "\n",
        "n = [1, 2, 3, 4, 5, 6]\n",
        "even = filter(lambda x: x % 2 == 0, n)\n",
        "print(list(even))\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_c_D_et3PCPK",
        "outputId": "b0014ed7-fcad-4881-fd65-a656db13afa0"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[2, 4, 6, 8]\n"
          ]
        }
      ],
      "source": [
        "\n",
        "a = [1, 2, 3, 4]\n",
        "b = map(lambda x: x * 2, a)\n",
        "print(list(b))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Qllw4tCxPFDy",
        "outputId": "c6983ce6-3cc7-49d1-d731-c11a64e00974"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "24\n"
          ]
        }
      ],
      "source": [
        "from functools import reduce\n",
        "\n",
        "\n",
        "a = [1, 2, 3, 4]\n",
        "b = reduce(lambda x, y: x * y, a)\n",
        "print(b)\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BdORoKuvcBW3",
        "outputId": "5457c1b0-4abe-427f-9e45-91211efd092b"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Even\n",
            "Odd\n"
          ]
        }
      ],
      "source": [
        "\n",
        "check = lambda x: \"Even\" if x % 2 == 0 else \"Odd\"\n",
        "\n",
        "print(check(4))\n",
        "print(check(7))\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uSI0fLRLcBW5",
        "outputId": "2d9ec1b4-dcc3-41ee-92ae-f70ef8a48784"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "(7, 12)\n"
          ]
        }
      ],
      "source": [
        "\n",
        "calc = lambda x, y: (x + y, x * y)\n",
        "\n",
        "res = calc(3, 4)\n",
        "print(res)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yKeGTZYOcBW6",
        "outputId": "0d81efaf-860e-421a-d40b-55c1b7477094"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[2, 4, 6]\n"
          ]
        }
      ],
      "source": [
        "\n",
        "n = [1, 2, 3, 4, 5, 6]\n",
        "even = filter(lambda x: x % 2 == 0, n)\n",
        "print(list(even))\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NZ0aewELcBW6",
        "outputId": "6a07b7cb-5579-4aa5-b21d-b90f1a9cfc98"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[2, 4, 6, 8]\n"
          ]
        }
      ],
      "source": [
        "\n",
        "a = [1, 2, 3, 4]\n",
        "b = map(lambda x: x * 2, a)\n",
        "print(list(b))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WIbEXGD9cBW7",
        "outputId": "bd687f47-332a-47ec-da47-2a93003bec2e"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "24\n"
          ]
        }
      ],
      "source": [
        "from functools import reduce\n",
        "\n",
        "\n",
        "a = [1, 2, 3, 4]\n",
        "b = reduce(lambda x, y: x * y, a)\n",
        "print(b)\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Hpbf5qF_cDEr",
        "outputId": "66064797-b891-48f1-f09b-b48b6bb7f075"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Even\n",
            "Odd\n"
          ]
        }
      ],
      "source": [
        "\n",
        "check = lambda x: \"Even\" if x % 2 == 0 else \"Odd\"\n",
        "\n",
        "print(check(4))\n",
        "print(check(7))\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tJg_uNR-cDEt",
        "outputId": "64a1e511-9832-4179-b31f-a5032005513d"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "(7, 12)\n"
          ]
        }
      ],
      "source": [
        "\n",
        "calc = lambda x, y: (x + y, x * y)\n",
        "\n",
        "res = calc(3, 4)\n",
        "print(res)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hn-XqrPycDEu",
        "outputId": "915dadcc-64e9-4dbf-951c-bca009f98d0a"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[2, 4, 6]\n"
          ]
        }
      ],
      "source": [
        "\n",
        "n = [1, 2, 3, 4, 5, 6]\n",
        "even = filter(lambda x: x % 2 == 0, n)\n",
        "print(list(even))\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QckimkIlcDEv",
        "outputId": "6ad21f82-37c6-4b4b-cbb5-e1197e34ad7a"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[2, 4, 6, 8]\n"
          ]
        }
      ],
      "source": [
        "\n",
        "a = [1, 2, 3, 4]\n",
        "b = map(lambda x: x * 2, a)\n",
        "print(list(b))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NgsG4FvmcDEw",
        "outputId": "5ae1d7ee-cf97-4596-a8b9-be6efe156cb1"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "24\n"
          ]
        }
      ],
      "source": [
        "from functools import reduce\n",
        "\n",
        "\n",
        "a = [1, 2, 3, 4]\n",
        "b = reduce(lambda x, y: x * y, a)\n",
        "print(b)\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HvRE7XWgf0h8"
      },
      "source": [
        "# *Pandas*"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TLVjkBa-ZQzT",
        "outputId": "3e1e56b4-9e0c-4e55-8163-8e98e66c88b3"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Multiply two Series:\n",
            "0     2\n",
            "1    12\n",
            "2    56\n",
            "3    90\n",
            "dtype: int64\n",
            "Divide Series1 by Series2:\n",
            "0    2.000000\n",
            "1    1.333333\n",
            "2    1.142857\n",
            "3    1.111111\n",
            "dtype: float64\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "ds1 = pd.Series([2, 4, 8, 10])\n",
        "ds2 = pd.Series([1, 3, 7, 9])\n",
        "print(\"Multiply two Series:\")\n",
        "ds = ds1 * ds2\n",
        "print(ds)\n",
        "print(\"Divide Series1 by Series2:\")\n",
        "ds = ds1 / ds2\n",
        "print(ds)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GoN4r_gfZUaK",
        "outputId": "c1227535-2186-445b-b3b0-0e901008e192"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Original dictionary:\n",
            "{'a': 100, 'b': 200, 'c': 300}\n",
            "Converted series:\n",
            "a    100\n",
            "b    200\n",
            "c    300\n",
            "dtype: int64\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "d1 = {'a': 100, 'b': 200, 'c':300}\n",
        "print(\"Original dictionary:\")\n",
        "print(d1)\n",
        "new_series = pd.Series(d1)\n",
        "print(\"Converted series:\")\n",
        "print(new_series)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EwXVUACvZbH6",
        "outputId": "1c9e5c9c-1345-4422-e08d-9f298412370f"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Original Data Series:\n",
            "0    400.00\n",
            "1    300.12\n",
            "2    100.00\n",
            "3    200.00\n",
            "dtype: float64\n",
            "2    100.00\n",
            "3    200.00\n",
            "1    300.12\n",
            "0    400.00\n",
            "dtype: float64\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "s = pd.Series([400, 300.12,100, 200])\n",
        "print(\"Original Data Series:\")\n",
        "print(s)\n",
        "new_s = pd.Series(s).sort_values()\n",
        "print(new_s)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dd0suou8Ze_b",
        "outputId": "fbc854fd-0822-4a90-8205-9f6ff1eec9ab"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Original Data Series:\n",
            "A    1\n",
            "B    2\n",
            "C    3\n",
            "dtype: int64\n",
            "Data Series after changing the order of index:\n",
            "B    2\n",
            "A    1\n",
            "C    3\n",
            "dtype: int64\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "s = pd.Series(data = [1,2,3], index = ['A', 'B', 'C'])\n",
        "print(\"Original Data Series:\")\n",
        "print(s)\n",
        "s = s.reindex(index = ['B','A','C'])\n",
        "print(\"Data Series after changing the order of index:\")\n",
        "print(s)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Z-jPpjgQZi60",
        "outputId": "333313dc-1065-4f05-a936-cfbb755647b7"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Original Series:\n",
            "sr1:\n",
            "0    1\n",
            "1    2\n",
            "2    3\n",
            "dtype: int64\n",
            "sr2:\n",
            "0    2\n",
            "1    3\n",
            "2    6\n",
            "dtype: int64\n",
            "\n",
            "Items of a given series not present in another given series:\n",
            "0    1\n",
            "3    6\n",
            "dtype: int64\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "sr1 = pd.Series([1, 2, 3])\n",
        "sr2 = pd.Series([2, 3, 6])\n",
        "print(\"Original Series:\")\n",
        "print(\"sr1:\")\n",
        "print(sr1)\n",
        "print(\"sr2:\")\n",
        "print(sr2)\n",
        "print(\"\\nItems of a given series not present in another given series:\")\n",
        "sr11 = pd.Series(np.union1d(sr1, sr2))\n",
        "sr22 = pd.Series(np.intersect1d(sr1, sr2))\n",
        "result = sr11[~sr11.isin(sr22)]\n",
        "print(result)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "H0-I3gZqZmT4",
        "outputId": "dc329e76-f3fb-4254-e1dd-329b650b6626"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "         name  score\n",
            "NAME   Manish   12.5\n",
            "SCORE  Dhiraj    9.0\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "exam_data  = {'name': ['Manish', 'Dhiraj'],\n",
        "'score': [12.5, 9]}\n",
        "labels = ['NAME', 'SCORE']\n",
        "df = pd.DataFrame(exam_data , index=labels)\n",
        "print(df)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fkUzH-ZYZp94",
        "outputId": "3bdf47ee-5421-4ef8-ba62-5949e192b501"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "First three rows of the data frame:\n",
            "     name  score\n",
            "0  Manish   12.5\n",
            "1  Dhiraj   91.0\n",
            "2     Man    2.5\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "exam_data  = {'name': ['Manish', 'Dhiraj','Man', 'Dhir'],\n",
        "        'score': [12.5, 91,2.5, 9]}\n",
        "df = pd.DataFrame(exam_data )\n",
        "print(\"First three rows of the data frame:\")\n",
        "print(df.iloc[:3])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Rpj0HT2jZubk",
        "outputId": "70a851f9-9bdd-4c80-a408-4e2d2c7c1b7c"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Number of Rows: 4\n",
            "Number of Columns: 2\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "exam_data  = {'name': ['Manish', 'Dhiraj','Man', 'Dhir'],\n",
        "        'score': [12.5, 91,2.5, 9]}\n",
        "df = pd.DataFrame(exam_data )\n",
        "total_rows=len(df.axes[0])\n",
        "total_cols=len(df.axes[1])\n",
        "print(\"Number of Rows: \"+str(total_rows))\n",
        "print(\"Number of Columns: \"+str(total_cols))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Yv8A6JP9ZzKx",
        "outputId": "1be5a70e-5051-4de2-ae27-47df3d6d7ef6"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Rows where score between 15 and 20 (inclusive):\n",
            "   name  score\n",
            "3  Dhir   19.0\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "exam_data  = {'name': ['Manish', 'Dhiraj','Man', 'Dhir'],\n",
        "        'score': [12.5, 91,20.5, 19]}\n",
        "df = pd.DataFrame(exam_data )\n",
        "print(\"Rows where score between 15 and 20 (inclusive):\")\n",
        "print(df[df['score'].between(15, 20)])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uWefswgiZ2ss",
        "outputId": "48d28e30-af84-47fa-f514-2f0ed3a9f5e9"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Sort the data frame first by ‘name’ in descending order, then by ‘Score’ in ascending order:\n",
            "     name  score\n",
            "3    Dhir   19.0\n",
            "1  Dhiraj   91.0\n",
            "2     Man   20.5\n",
            "0  Manish   12.5\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "exam_data  = {'name': ['Manish', 'Dhiraj','Man', 'Dhir'],\n",
        "        'score': [12.5, 91,20.5, 19]}\n",
        "df = pd.DataFrame(exam_data )\n",
        "result_sort=df.sort_values(by=['name', 'score'], ascending=[True,\n",
        "True])\n",
        "print(\"Sort the data frame first by ‘name’ in descending order, then by ‘Score’ in ascending order:\")\n",
        "print(result_sort)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6t3NR8knaJRZ",
        "outputId": "2bcf4433-00ea-4925-c719-40c6408019cd"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "     name  score\n",
            "0   Anish   12.5\n",
            "1  Dhiraj   91.0\n",
            "2     Man   20.5\n",
            "3    Dhir   19.0\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "exam_data  = {'name': ['Manish', 'Dhiraj','Man', 'Dhir'],\n",
        "        'score': [12.5, 91,20.5, 19]}\n",
        "df = pd.DataFrame(exam_data )\n",
        "df['name'] = df['name'].replace('Manish', 'Anish')\n",
        "print(df)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jsa3JDVuaMk5",
        "outputId": "1d997917-0a1a-422c-a4e7-7460f4652d3b"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "New DataFrame after inserting the 'medium' column\n",
            "     name  score   medium\n",
            "0  Manish   12.5  english\n",
            "1  Dhiraj   91.0    hindi\n",
            "2     Man   20.5    hindi\n",
            "3    Dhir   19.0  english\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "exam_data  = {'name': ['Manish', 'Dhiraj','Man', 'Dhir'],\n",
        "        'score': [12.5, 91,20.5, 19]}\n",
        "df = pd.DataFrame(exam_data )\n",
        "medium = ['english','hindi','hindi','english']\n",
        "df['medium'] = medium\n",
        "print(\"\\nNew DataFrame after inserting the 'medium' column\")\n",
        "print(df)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b8rWtQYKaQVF",
        "outputId": "57856924-162b-4b5d-8c55-5131b426d80f"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "New DataFrame after renaming columns:\n",
            "     NAME  SCORE\n",
            "0  Manish   12.5\n",
            "1  Dhiraj   91.0\n",
            "2     Man   20.5\n",
            "3    Dhir   19.0\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "exam_data  = {'name': ['Manish', 'Dhiraj','Man', 'Dhir'],\n",
        "'score': [12.5, 91,20.5, 19]}\n",
        "df = pd.DataFrame(exam_data )\n",
        "df = df.rename(columns={'name': 'NAME', 'score': 'SCORE'})\n",
        "print(\"New DataFrame after renaming columns:\")\n",
        "print(df)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PoanWfHFaTXL",
        "outputId": "0f83c82b-9427-452f-e951-919a55efcb51"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "New DataFrame\n",
            "     name  score\n",
            "1  Dhiraj   91.0\n",
            "2     Man   20.5\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "exam_data  = {'name': ['Manish', 'Dhiraj','Man', 'Dhir'],\n",
        "'score': [12.5, 91,20.5, 19]}\n",
        "df = pd.DataFrame(exam_data )\n",
        "df = df[df.score >= 20]\n",
        "print(\"New DataFrame\")\n",
        "print(df)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2HFs0aXUaYyy",
        "outputId": "171ebf54-f016-46dd-a73e-9dd962b346bf"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Data Series:\n",
            "0    100\n",
            "1    200\n",
            "2    400\n",
            "dtype: object\n",
            "0    10\n",
            "1    20\n",
            "2    40\n",
            "dtype: object\n",
            "New DataFrame combining two series:\n",
            "     0   1\n",
            "0  100  10\n",
            "1  200  20\n",
            "2  400  40\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "s1 = pd.Series(['100', '200', '400'])\n",
        "s2 = pd.Series(['10', '20', '40'])\n",
        "print(\"Data Series:\")\n",
        "print(s1)\n",
        "print(s2)\n",
        "df = pd.concat([s1, s2], axis=1)\n",
        "print(\"New DataFrame combining two series:\")\n",
        "print(df)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P-xM8k7-aZ8d",
        "outputId": "21431c2e-5b28-4616-f2ad-2d6ee968fed0"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Value of Row4\n",
            "0    400\n",
            "1     40\n",
            "Name: 2, dtype: object\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "s1 = pd.Series(['100', '200', '400'])\n",
        "s2 = pd.Series(['10', '20', '40'])\n",
        "df = pd.concat([s1, s2], axis=1)\n",
        "print(\"Value of Row4\")\n",
        "print(df.iloc[2])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Nut6rsGeactC",
        "outputId": "7ac0191d-9d9d-4374-8d78-5b6a300a7b76"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "New DataFrame\n",
            "   1    0   1\n",
            "0  1  100  10\n",
            "1  2  200  20\n",
            "2  3  400  40\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "s1 = pd.Series(['100', '200', '400'])\n",
        "s2 = pd.Series(['10', '20', '40'])\n",
        "df = pd.concat([s1, s2], axis=1)\n",
        "new_col = [1, 2, 3]\n",
        "\n",
        "idx = 0\n",
        "df.insert(loc=idx, column='1', value=new_col)\n",
        "print(\"\\nNew DataFrame\")\n",
        "print(df)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "vygevFUVeibl"
      },
      "outputs": [],
      "source": [
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EP4VIoEsbcc6",
        "outputId": "d4c6b4dd-2075-4395-96e2-a19913a78ee8"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "0    10\n",
            "1    20\n",
            "2    30\n",
            "3    40\n",
            "dtype: int64\n",
            "a    1.5\n",
            "b    2.5\n",
            "c    3.5\n",
            "dtype: float64\n",
            "math       85\n",
            "science    90\n",
            "english    78\n",
            "dtype: int64\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "\n",
        "s1 = pd.Series([10, 20, 30, 40])\n",
        "s2 = pd.Series([1.5, 2.5, 3.5], index=['a', 'b', 'c'])\n",
        "s3 = pd.Series({'math': 85, 'science': 90, 'english': 78})\n",
        "\n",
        "print(s1)\n",
        "print(s2)\n",
        "print(s3)\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QCemTsWKbccD",
        "outputId": "5d5bf8d9-c2a6-4a7f-d893-b8df08a16d1c"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "s1:\n",
            " 0    10\n",
            "1    20\n",
            "2    30\n",
            "3    40\n",
            "dtype: int64\n",
            "s2:\n",
            " a    1.5\n",
            "b    2.5\n",
            "c    3.5\n",
            "dtype: float64\n",
            "s3:\n",
            " math       85\n",
            "science    90\n",
            "english    78\n",
            "dtype: int64\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "\n",
        "s1 = pd.Series([10, 20, 30, 40])\n",
        "s2 = pd.Series([1.5, 2.5, 3.5], index=['a', 'b', 'c'])\n",
        "s3 = pd.Series({'math': 85, 'science': 90, 'english': 78})\n",
        "\n",
        "print(\"s1:\\n\", s1)\n",
        "print(\"s2:\\n\", s2)\n",
        "print(\"s3:\\n\", s3)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "id": "Mps1KZuwV8U-",
        "outputId": "3187ab5c-470e-4fe9-92fb-3a3b78bd4b21"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Data Series:\n",
            "0    100\n",
            "1    200\n",
            "2    400\n",
            "dtype: int64\n",
            "0    10\n",
            "1    20\n",
            "2    40\n",
            "dtype: int64\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "s1 = pd.Series([100, 200, 400])\n",
        "s2 = pd.Series([10, 20, 40])\n",
        "\n",
        "\n",
        "print(\"Data Series:\")\n",
        "print(s1)\n",
        "print(s2)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "id": "E5UzWXPEX9kl",
        "outputId": "6409ae41-0f41-4046-aa60-4fb520ca3094"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "a     5\n",
            "b    10\n",
            "c    15\n",
            "d    20\n",
            "e    25\n",
            "dtype: int64\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "values=[5,10,15,20,25]\n",
        "custom_index=['a','b','c','d','e']\n",
        "s=pd.Series(values,index=custom_index)\n",
        "print(s)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "id": "XxybwFM3Y4j7",
        "outputId": "ca6e04be-1de8-4dae-878d-8751608c1ef2"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "apple     50\n",
            "banana    30\n",
            "cherry    20\n",
            "dtype: int64\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "fruits_data = {'apple': 50, 'banana': 30, 'cherry': 20}\n",
        "fruits_Series = pd.Series(fruits_data)\n",
        "print(fruits_Series)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "id": "EkOnEuv1ZoMS",
        "outputId": "7d9f5266-614e-4099-94c9-c86c0079fbd7"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Alice        NaN\n",
            "Alive        NaN\n",
            "Bob        160.0\n",
            "Charlie    180.0\n",
            "dtype: float64\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "subject_A = pd.Series({'Alive': 85, 'Bob': 78, 'Charlie': 92})\n",
        "subject_B = pd.Series({'Alice': 90, 'Bob': 82, 'Charlie': 88})\n",
        "total_marks = subject_A + subject_B\n",
        "print(total_marks)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "id": "-tzuMx6teChd",
        "outputId": "9bdf2491-a7da-41b3-8802-d713a268f79f"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "0     1\n",
            "1     4\n",
            "2     7\n",
            "3    10\n",
            "dtype: int32\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "dates = pd.Series([\n",
        "    '2023-01-15',\n",
        "    '2023-04-22',\n",
        "    '2023-07-08',\n",
        "    '2023-10-31',\n",
        "])\n",
        "dates = pd.to_datetime(dates)\n",
        "months = dates.dt.month\n",
        "print(months)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "id": "C0YwEpHMuWxY",
        "outputId": "f62bae14-4ed4-4451-875c-d9879c80008b"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "0     5\n",
            "1    10\n",
            "2    15\n",
            "3    20\n",
            "4    25\n",
            "dtype: int64\n"
          ]
        }
      ],
      "source": [
        "\n",
        "#1.Create a Pandas Series of 5 elements: [5, 10, 15, 20, 25]\n",
        "import pandas as pd\n",
        "s = pd.Series([5, 10, 15, 20, 25])\n",
        "print(s)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "id": "0NeJ5OE7eiKR",
        "outputId": "14dbb54a-038c-4624-a3ef-2a7a066a2fa2"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "a     5\n",
            "b    10\n",
            "c    15\n",
            "d    20\n",
            "e    25\n",
            "dtype: int64\n"
          ]
        }
      ],
      "source": [
        "#2\n",
        "import pandas as pd\n",
        "s=pd.Series([5, 10, 15, 20, 25], index=['a', 'b', 'c', 'd', 'e'])\n",
        "print(s)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "id": "B6ICKy3-fsEw",
        "outputId": "8e856615-7cc8-48c8-b6cf-396749745c66"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "15\n"
          ]
        }
      ],
      "source": [
        "#3\n",
        "import pandas as pd\n",
        "s=pd.Series([5, 10, 15, 20, 25], index=['a', 'b', 'c', 'd', 'e'])\n",
        "print(s['c'])\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "id": "UUh-wj8Gf7aY",
        "outputId": "2aa977e8-f180-47f9-a4fb-f48c3eac4982"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Maximum value: 25\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "s=pd.Series([5, 10, 15, 20, 25], index=['a', 'b', 'c', 'd', 'e'])\n",
        "max_value=s.max()\n",
        "print(\"Maximum value:\",max_value)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "id": "VE3JzcLIvDLa",
        "outputId": "ed0aa276-b035-4e37-8f9c-99bd4ad71e8a"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "a    10\n",
            "b    15\n",
            "c    20\n",
            "d    25\n",
            "e    30\n",
            "dtype: int64\n"
          ]
        }
      ],
      "source": [
        "#5\n",
        "import pandas as pd\n",
        "s = pd.Series([5, 10, 15, 20, 25], index=['a', 'b', 'c', 'd', 'e'])\n",
        "s_added = s + 5\n",
        "print(s_added)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "id": "XeMf6zvqvJCA",
        "outputId": "c592041c-d7d1-4cc3-ae78-6286160c9ab7"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "apple     50\n",
            "banana    30\n",
            "cherry    20\n",
            "dtype: int64\n"
          ]
        }
      ],
      "source": [
        "#6\n",
        "import pandas as pd\n",
        "data = {'apple': 50, 'banana': 30, 'cherry': 20}\n",
        "fruit_series = pd.Series(data)\n",
        "print(fruit_series)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "id": "x1G47J2ovOvi",
        "outputId": "f0be0777-2896-4196-8799-907fad94db83"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "apple     50\n",
            "banana    30\n",
            "dtype: int64\n"
          ]
        }
      ],
      "source": [
        "#7.\n",
        "import pandas as pd\n",
        "data = {'apple': 50, 'banana': 30, 'cherry': 20}\n",
        "fruit_series = pd.Series(data)\n",
        "filtered_series = fruit_series[fruit_series > 25]\n",
        "print(filtered_series)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "id": "muudhOsAvVSZ",
        "outputId": "3dce4e9f-23c9-46ba-99d9-40f0bde1f3b6"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "apple     60.0\n",
            "banana    36.0\n",
            "cherry    24.0\n",
            "dtype: float64\n"
          ]
        }
      ],
      "source": [
        "#8.\n",
        "import pandas as pd\n",
        "data = {'apple': 50, 'banana': 30, 'cherry': 20}\n",
        "fruit_series = pd.Series(data)\n",
        "increased_prices = fruit_series * 1.2\n",
        "print(increased_prices)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "id": "rQy4em1DvZUB",
        "outputId": "d234369a-5388-4807-fb16-3197570e8c0e"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "apple      NaN\n",
            "banana    40.0\n",
            "cherry    25.0\n",
            "date       NaN\n",
            "dtype: float64\n"
          ]
        }
      ],
      "source": [
        "#9.\n",
        "import pandas as pd\n",
        "fruit_series = pd.Series({'apple': 50, 'banana': 30, 'cherry': 20})\n",
        "new_prices = pd.Series({'banana': 10, 'cherry': 5, 'date': 15})\n",
        "combined = fruit_series + new_prices\n",
        "print(combined)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "id": "kOSYBwS6ve5K",
        "outputId": "d69904c8-9134-4ca6-9e10-9f47ae7e8ec7"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Mean: 30.0\n",
            "Standard Deviation: 15.811388300841896\n"
          ]
        }
      ],
      "source": [
        "#10\n",
        "import pandas as pd\n",
        "s = pd.Series([10, 20, 30, 40, 50])\n",
        "mean_val = s.mean()\n",
        "std_val = s.std()\n",
        "print(\"Mean:\", mean_val)\n",
        "print(\"Standard Deviation:\", std_val)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "id": "bi8rR-HxvnMy",
        "outputId": "54b0ab3f-0cda-42ba-9a67-7b1c3040fc65"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Alice      173\n",
            "Bob        152\n",
            "Charlie    182\n",
            "dtype: int64\n"
          ]
        }
      ],
      "source": [
        "#11.\n",
        "import pandas as pd\n",
        "subject1 = pd.Series({'Alice': 85, 'Bob': 78, 'Charlie': 92})\n",
        "subject2 = pd.Series({'Alice': 88, 'Bob': 74, 'Charlie': 90})\n",
        "total_marks = subject1 + subject2\n",
        "print(total_marks)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "id": "L9X0tQG2vs4S",
        "outputId": "38e5346b-5db8-43a1-f80a-089d89b041b0"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "0     1\n",
            "1     3\n",
            "2     7\n",
            "3    12\n",
            "dtype: int32\n"
          ]
        }
      ],
      "source": [
        "#12\n",
        "import pandas as pd\n",
        "timestamps = pd.Series([\n",
        "    '2025-01-14', '2025-03-22', '2025-07-14', '2025-12-01'\n",
        "])\n",
        "timestamps = pd.to_datetime(timestamps)\n",
        "months = timestamps.dt.month\n",
        "print(months)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WrDxJDV7vyip",
        "outputId": "26bb9371-b090-4845-ed05-5c58e6970b87"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index of maximum value: D\n"
          ]
        }
      ],
      "source": [
        "\n",
        "#13.\n",
        "import pandas as pd\n",
        "s = pd.Series({'A': 10, 'B': 25, 'C': 18, 'D': 30})\n",
        "max_index = s.idxmax()\n",
        "print(\"Index of maximum value:\", max_index)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 1. Create a DataFrame with the given data and updated cities\n",
        "import pandas as pd\n",
        "\n",
        "data = {\n",
        "    'Name': ['Adi', 'Dito', 'Chinmmya', 'Beta'],\n",
        "    'Age': [25, 30, 35, 28],\n",
        "    'City': ['Dubai', 'Thailand', 'Kashmir', 'Rajasthan']\n",
        "}\n",
        "df = pd.DataFrame(data)\n",
        "print(\"Initial DataFrame:\")\n",
        "print(df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "n-iM7bssarQY",
        "outputId": "80d35171-99d5-4d3e-ee4f-7952348c4f73"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Initial DataFrame:\n",
            "       Name  Age       City\n",
            "0       Adi   25      Dubai\n",
            "1      Dito   30   Thailand\n",
            "2  Chinmmya   35    Kashmir\n",
            "3      Beta   28  Rajasthan\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 2. Sort the DataFrame by Age in descending order\n",
        "import pandas as pd\n",
        "\n",
        "data = {\n",
        "    'Name': ['Adi', 'Dito', 'Chinmmya', 'Beta'],\n",
        "    'Age': [25, 30, 35, 28],\n",
        "    'City': ['Dubai', 'Thailand', 'Kashmir', 'Rajasthan']\n",
        "}\n",
        "\n",
        "df_sorted = df.sort_values(by='Age', ascending=False)\n",
        "print(\"\\nSorted by Age (Descending):\")\n",
        "print(df_sorted)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-HltnImdavno",
        "outputId": "ac8ddd65-c7c1-403a-fed3-fbcdab7785da"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Sorted by Age (Descending):\n",
            "       Name  Age       City\n",
            "2  Chinmmya   35    Kashmir\n",
            "1      Dito   30   Thailand\n",
            "3      Beta   28  Rajasthan\n",
            "0       Adi   25      Dubai\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 3. Add a new column called Salary\n",
        "import pandas as pd\n",
        "\n",
        "data = {\n",
        "    'Name': ['Adi', 'Dito', 'Chinmmya', 'Beta'],\n",
        "    'Age': [25, 30, 35, 28],\n",
        "    'City': ['Dubai', 'Thailand', 'Kashmir', 'Rajasthan']\n",
        "}\n",
        "\n",
        "df['Salary'] = [50000, 60000, 70000, 55000]\n",
        "print(\"\\nDataFrame with Salary:\")\n",
        "print(df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CUJt2xdPfP5k",
        "outputId": "7201b982-62c0-460f-9956-b24a32dbcecc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "DataFrame with Salary:\n",
            "       Name  Age       City  Salary\n",
            "0       Adi   25      Dubai   50000\n",
            "1      Dito   30   Thailand   60000\n",
            "2  Chinmmya   35    Kashmir   70000\n",
            "3      Beta   28  Rajasthan   55000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 4. Find the rows where Age is greater than 30\n",
        "age_gt_30 = df[df['Age'] > 30]\n",
        "print(\"\\nPeople with Age > 30:\")\n",
        "print(age_gt_30)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PKmwac3DhTr6",
        "outputId": "6bdb85f4-c5e6-4189-cd79-e7fb51111219"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "People with Age > 30:\n",
            "       Name  Age     City  Salary\n",
            "2  Chinmmya   35  Kashmir   70000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 5. Change the city of 'Dito' to 'Dubai'\n",
        "df.loc[df['Name'] == 'Dito', 'City'] = 'Dubai'\n",
        "print(\"\\nUpdated City for Dito:\")\n",
        "print(df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9Y_ngKGIkEvX",
        "outputId": "fe103c1f-f4f3-4970-f44c-cc904bf92072"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Updated City for Dito:\n",
            "       Name  Age       City  Salary\n",
            "0       Adi   25      Dubai   50000\n",
            "1      Dito   30      Dubai   60000\n",
            "2  Chinmmya   35    Kashmir   70000\n",
            "3      Beta   28  Rajasthan   55000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#6. Drop the column 'City' from the DataFrame\n",
        "df_dropped = df.drop('City', axis=1)\n",
        "print(\"\\nDataFrame without City column:\")\n",
        "print(df_dropped)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9YHv7La6lO8m",
        "outputId": "99c34d36-3bad-4c3e-f840-052859b6258d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "DataFrame without City column:\n",
            "       Name  Age  Salary\n",
            "0       Adi   25   50000\n",
            "1      Dito   30   60000\n",
            "2  Chinmmya   35   70000\n",
            "3      Beta   28   55000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        " #7. Find the average (mean) Age\n",
        "mean_age = df['Age'].mean()\n",
        "print(f\"\\nAverage Age: {mean_age}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jcZg1rLsmAd9",
        "outputId": "52901109-94e4-4f04-d5e2-ce7f224017fe"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Average Age: 29.5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 8. Check if there is any person from 'Dubai'\n",
        "has_dubai = 'Dubai' in df['City'].values\n",
        "print(f\"\\nIs anyone from Dubai? {has_dubai}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DqhlTZPhmcOV",
        "outputId": "c330f33a-d9e5-4634-d1a7-debbf3360c23"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Is anyone from Dubai? True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#9. Search for a person named \"Dito\" and display their info\n",
        "dito_info = df[df['Name'] == 'Dito']\n",
        "print(\"\\nInformation of Dito:\")\n",
        "print(dito_info)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aBormMU_m77k",
        "outputId": "a5384795-35c6-4286-e018-e871a924f180"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Information of Dito:\n",
            "   Name  Age   City  Salary\n",
            "1  Dito   30  Dubai   60000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 10. Count the number of people in each city\n",
        "city_counts = df['City'].value_counts()\n",
        "print(\"\\nNumber of people in each city:\")\n",
        "print(city_counts)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "w4vj7cBini98",
        "outputId": "bf1a4bf5-d22b-496f-df14-eb57ec1b7ff2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Number of people in each city:\n",
            "City\n",
            "Dubai        2\n",
            "Kashmir      1\n",
            "Rajasthan    1\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 11. Find the person with the maximum salary\n",
        "max_salary_person = df[df['Salary'] == df['Salary'].max()]\n",
        "print(\"\\nPerson with the maximum salary:\")\n",
        "print(max_salary_person)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0FP0k8IcoXPr",
        "outputId": "0a41d36b-e05b-480a-cec0-d72aea596a24"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Person with the maximum salary:\n",
            "       Name  Age     City  Salary\n",
            "2  Chinmmya   35  Kashmir   70000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "week-03"
      ],
      "metadata": {
        "id": "bWCY5-_QnDrR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Array Aggregation Function\n",
        "\n",
        "import numpy as np\n",
        "#sum\n",
        "arr = np.array([1, 2, 3, 4, 5])\n",
        "print(\"sum:\",arr.sum())\n",
        "\n",
        "#mean\n",
        "print(\"mean\",arr.mean())\n",
        "\n",
        "#min/max\n",
        "print(\"min\",arr.min())\n",
        "print(\"max\",arr.max())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CnBgu4UyfJ1i",
        "outputId": "af833fa3-9c75-4d47-88bb-a00da1aa0436"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "sum: 15\n",
            "mean 3.0\n",
            "min 1\n",
            "max 5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Getting largest element of an array from individual axis\n",
        "import numpy as np\n",
        "import random\n",
        "array1=np.random .randint(16,size=(4,4))\n",
        "print(\"input Array:\\n\",array1)\n",
        "print (\"largest number in x axis: \", np.max(array1,axis=1))\n",
        "print (\"largest number in x axis: \", np.max(array1,axis=0))\n",
        "print(\"Standard deviation:\", array1.std())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "m1ld34OsggiI",
        "outputId": "da497969-67fd-4cab-df97-108dcbe65ec2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "input Array:\n",
            " [[13  7 12  4]\n",
            " [ 5  1  5 13]\n",
            " [ 0 10  4  7]\n",
            " [ 1  5  1 11]]\n",
            "largest number in x axis:  [13 13 10 11]\n",
            "largest number in x axis:  [13 10 12 13]\n",
            "Standard deviation: 4.318835925339141\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "k4DkoWJei6kG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "arr = np.array([1, 2, 3])\n",
        "\n",
        "print(\"sin   :\", np.sin(arr))\n",
        "print(\"cos   :\", np.cos(arr))\n",
        "print(\"tan   :\", np.tan(arr))\n",
        "print(\"cosec :\", 1 / np.sin(arr))\n",
        "print(\"sec   :\", 1 / np.cos(arr))\n",
        "print(\"cot   :\", 1 / np.tan(arr))\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "n9t1Coa1Y_lu",
        "outputId": "b85793ba-fb73-4567-85b5-9f2500a00b32"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "sin   : [0.84147098 0.90929743 0.14112001]\n",
            "cos   : [ 0.54030231 -0.41614684 -0.9899925 ]\n",
            "tan   : [ 1.55740772 -2.18503986 -0.14254654]\n",
            "cosec : [1.18839511 1.09975017 7.0861674 ]\n",
            "sec   : [ 1.85081572 -2.40299796 -1.01010867]\n",
            "cot   : [ 0.64209262 -0.45765755 -7.01525255]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "hzSPVkbZkAWd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from functools import reduce\n",
        "arr=[1, 2, 3, 4]\n",
        "total = reduce(lambda x, y: x + y, arr)\n",
        "print(\"Sum using reduce:\", total)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SYXPNaKchnL9",
        "outputId": "01df4024-b8bb-4707-91b7-ee950deac21f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Sum using reduce: 10\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#map()\n",
        "def square(number):\n",
        "  return number*number\n",
        "\n",
        "nums=[1, 2, 3, 4]\n",
        "squared_number=list(map(square,nums))\n",
        "print(squared_number)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ftvEPYql0kNR",
        "outputId": "9a35adc8-3495-4c7d-e75a-971502496d54"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 4, 9, 16]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "nums1 = [1, 2, 3, 4, 5, 6]\n",
        "squareofnums1 = list(map(lambda n: n * n, nums1))\n",
        "print(squareofnums1)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8tQK9hGz1gDY",
        "outputId": "cad3b544-6c40-45a6-c041-b4c8eb45416f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 4, 9, 16, 25, 36]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "df = pd.read_csv(\"/content/Dataset .csv\")\n",
        "\n",
        "# Histogram\n",
        "df[\"Aggregate rating\"].plot(kind=\"hist\", bins=10, title=\"Histogram of Ratings\")\n",
        "plt.xlabel(\"Aggregate rating\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "VmJ9Vj962db_",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "outputId": "0c96a258-5f98-4fd9-87b2-a67932e34771"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Bar Graph\n",
        "df.head(10).plot(\n",
        "    x=\"Restaurant Name\",\n",
        "    y=\"Average Cost for two\",\n",
        "    kind=\"bar\",\n",
        "    figsize=(10,5),\n",
        "    title=\"Bar Graph - Avg Cost for Two\"\n",
        ")\n",
        "plt.ylabel(\"Average Cost for Two\")\n",
        "plt.xticks(rotation=45, ha=\"right\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 667
        },
        "id": "kz-vM-b76428",
        "outputId": "7d99c427-6cac-4ff6-82f5-4aff85e67886"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Scatter Plot\n",
        "df.plot(\n",
        "    kind=\"scatter\",\n",
        "    x=\"Votes\",\n",
        "    y=\"Aggregate rating\",\n",
        "    title=\"Scatter Plot - Votes vs Rating\"\n",
        ")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "J1zrMJoj7A4r",
        "outputId": "9e05bd7d-6883-4893-f8a7-46365770371e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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OSpERESup8Keo1KvXj3MnDkTV65cwYoVK2wZioiIiKgcuz6ZtqLxjAoREZHrqdAn0xIRERE5CgsVIiIiki0WKkRERCRbLFSIiIhItlioEBERkWyxUCEiIiLZYqFCREREssVChYiIiGSLhQoRERHJFgsVIiIiki0WKkRERCRbLFSIiIhItlioEBERkWyxUCEiIiLZYqFCREREssVChYiIiGSLhQoRERHJFgsVIiIiki0WKkRERCRbLFSIiIhItlioEBERkWyxUCEiIiLZYqFCREREssVChYiIiGSLhQoRERHJFgsVIiIiki0WKkRERCRbLFSIiIhItlioEBERkWyxUCEiIiLZYqFCREREssVChYiIiGSLhQoRERHJFgsVIiIiki2nFirbt29H7969ERERAYVCgZ9//tmZ0yEiIiKZcWqhUlBQgGbNmmHevHnOnAYRERHJlLszd96zZ0/07NnTmVMgIiIiGXNqoSJVUVERioqKNN/n5uY6cTZERETkaC51M+306dMRGBio+YqKinL2lIiIiMiBXKpQmTBhAnJycjRfly9fdvaUiIiIyIFc6tKPSqWCSqVy9jSIiIiogrjUGRUiIiKqWpx6RiU/Px/nzp3TfH/hwgWkpqaiWrVqiI6OduLMiIiISA6cWqgcPHgQXbt21Xw/btw4AMDQoUOxePFiJ82KiIiI5MKphUqXLl0ghHDmFIiIiEjGeI8KERERyRYLFSIiIpItFipEREQkWyxUiIiISLZYqBAREZFssVAhIiIi2WKhQkRERLLFQoWIiIhki4UKERERyRYLFSIiIpItFipEREQkWyxUiIiISLZYqBAREZFssVAhIiIi2WKhQkRERLLFQoWIiIhki4UKERERyRYLFSIiIpItFipEREQkWyxUiIiISLZYqBAREZFssVAhIiIi2WKhQkRERLLFQoWIiIhki4UKERERyRYLFSIiIpItFipEREQkWyxUiIiISLZYqBAREZFssVAhIiIi2WKhQkRERLLFQoWIiIhki4UKERERyRYLFSIiIpItFipEREQkWyxUiIiISLZYqBAREZFssVAhIiIi2WKhQkRERLLFQoWIiIhki4UKERERyRYLFSIiIpItFipEREQkWyxUiIiISLZYqBAREZFssVAhIiIi2WKhQkRERLLFQoWIiIhki4UKERERyRYLFSIiIpItFipEREQk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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Box Plot\n",
        "df[[\"Average Cost for two\"]].plot(\n",
        "    kind=\"box\",\n",
        "    title=\"Box Plot - Avg Cost for Two\"\n",
        ")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        },
        "id": "eI4LbNwY7Lz5",
        "outputId": "82d6df1f-8950-4d3d-c98b-cf18f5e7d986"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "df = pd.read_csv(\"/content/filpkarttopasusgaminglaptop.csv\")\n",
        "plt.hist(df['price'], bins=15, color='Orange', edgecolor='black')\n",
        "plt.title(\"Laptop Prices Distribution of Prices\")\n",
        "plt.xlabel(\"Price (₹)\")\n",
        "plt.ylabel(\"Frequency\")\n",
        "plt.xticks(rotation=45)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 511
        },
        "id": "lG6oJGhSBTSd",
        "outputId": "196eb462-0938-4d10-fac9-f351d346328b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Load dataset\n",
        "df = pd.read_csv(\"/content/filpkarttopasusgaminglaptop.csv\")\n",
        "\n",
        "\n",
        "# Plot Bar Graph\n",
        "plt.figure(figsize=(12,6))\n",
        "plt.bar(df['specification'], df['price'], color='skyblue', edgecolor='black')\n",
        "\n",
        "plt.title(\"Laptop Prices (Flipkart Asus Gaming Laptops)\")\n",
        "plt.xlabel(\"Laptop Display Size\")\n",
        "plt.ylabel(\"Price (₹)\")\n",
        "plt.xticks(rotation=45)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 606
        },
        "id": "sDHY4y7OEtP_",
        "outputId": "e016af93-7a76-4855-b0c7-58dfe9c4d876"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "df = pd.read_csv(\"/content/filpkarttopasusgaminglaptop.csv\")\n",
        "plt.figure(figsize=(12,6))\n",
        "plt.scatter(df['rating'], df['price'], color='red', alpha=0.7, edgecolors='black')\n",
        "plt.title(\"Scatter Plot of Laptop Prices \")\n",
        "plt.xlabel(\"Rating\")\n",
        "plt.ylabel(\"Price (₹)\")\n",
        "plt.xticks(rotation=90)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 572
        },
        "id": "CaYqrUrxGFUX",
        "outputId": "0e668e00-7665-404f-ca40-02b994ce0a9c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Load dataset\n",
        "df = pd.read_csv(\"/content/filpkarttopasusgaminglaptop.csv\")\n",
        "\n",
        "# Clean and convert price column\n",
        "df['price'] = df['price'].str.replace(r'[₹,]', '', regex=True).astype(float)\n",
        "\n",
        "# Box Plot: Price vs Storage\n",
        "plt.figure(figsize=(8,6))\n",
        "df.boxplot(column='price', by='storage', grid=False)\n",
        "\n",
        "plt.title(\"Price Variation by Storage Size\")\n",
        "plt.suptitle(\"\")  # removes the default extra title\n",
        "plt.xlabel(\"Storage Size\")\n",
        "plt.ylabel(\"Price (₹)\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 480
        },
        "id": "aLWW1K_fI3No",
        "outputId": "d3907579-fe30-4918-b520-ca43b322d68c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Load dataset\n",
        "df = pd.read_csv(\"/content/filpkarttopasusgaminglaptop.csv\")\n",
        "\n",
        "# Clean and convert price column\n",
        "df['price'] = df['price'].str.replace(r'[₹,]', '', regex=True).astype(float)\n",
        "\n",
        "# Box Plot: Price vs RAM\n",
        "plt.figure(figsize=(8,6))\n",
        "df.boxplot(column='price', by='ram', grid=False)\n",
        "\n",
        "plt.title(\"Price Distribution by RAM Size\")\n",
        "plt.suptitle(\"\")  # removes the default extra title\n",
        "plt.xlabel(\"RAM Size\")\n",
        "plt.ylabel(\"Price (₹)\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 480
        },
        "id": "HMkgRUSkKNIZ",
        "outputId": "7477f919-f49a-4d91-ba32-92ad4c78f87d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "10DnN7LpfKUF4vRw1bi97xxUKCHpQmjPj",
      "authorship_tag": "ABX9TyP4A5pc9WZikLHoKg1FPcV0",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}